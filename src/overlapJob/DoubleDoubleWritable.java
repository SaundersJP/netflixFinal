package overlapJob;

import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;

import org.apache.hadoop.io.WritableComparable;

public class DoubleDoubleWritable implements WritableComparable<DoubleDoubleWritable> {

  Double left;
  Double right;

  /**
   * Empty constructor - required for serialization.
   */ 
  public DoubleDoubleWritable() {

  }

  /**
   * Constructor with two Double objects provided as input.
   */ 
  public DoubleDoubleWritable(Double left, Double right) {
    this.left = left;
    this.right = right;
  }

  /**
   * Serializes the fields of this object to out.
   */
  public void write(DataOutput out) throws IOException {
    out.writeDouble(left);
    out.writeDouble(right);
  }

  /**
   * Deserializes the fields of this object from in.
   */
  public void readFields(DataInput in) throws IOException {
    left = in.readDouble();
    right = in.readDouble();
  }

  /**
   * Compares this object to another DoubleDoubleWritable object by
   * comparing the left Doubles first. If the left Doubles are equal,
   * then the right Doubles are compared.
   */
  public int compareTo(DoubleDoubleWritable other) {
    int ret = left.compareTo(other.left);
    if (ret == 0) {
      return right.compareTo(other.right);
    }
    return ret;
  }

  /* getters and setters for the two objects in the pair */
  public Double getLeft() {
	  return left;
  }
  
  public Double getRight() {
	  return right;
  }
  
  public void  setLeft(Double left) {
	  this.left = left;
  }
  
  public void setRight(Double right) {
	  this.right = right;
  }

  /**
   * A custom method that returns the two Doubles in the 
   * DoubleDoubleWritable object inside parentheses and separated by
   * a comma. For example: "(left,right)".
   */
  public String toString() {
    return "(" + left + "," + right + ")";
  }

  /**
   * The equals method compares two DoubleDoubleWritable objects for 
   * equality. The equals and hashCode methods have been automatically
   * generated by Eclipse by right-clicking on an empty line, selecting
   * Source, and then selecting the Generate hashCode() and equals()
   * option. 
   */
  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (getClass() != obj.getClass())
      return false;
    DoubleDoubleWritable other = (DoubleDoubleWritable) obj;
    if (left == null) {
      if (other.left != null)
        return false;
    } else if (!left.equals(other.left))
      return false;
    if (right == null) {
      if (other.right != null)
        return false;
    } else if (!right.equals(other.right))
      return false;
    return true;
  }

  /**
   * The hashCode method generates a hash code for a DoubleDoubleWritable 
   * object. The equals and hashCode methods have been automatically
   * generated by Eclipse by right-clicking on an empty line, selecting
   * Source, and then selecting the Generate hashCode() and equals()
   * option. 
   */
  @Override
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((left == null) ? 0 : left.hashCode());
    result = prime * result + ((right == null) ? 0 : right.hashCode());
    return result;
  }
}
